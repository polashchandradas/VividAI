name: Generate iOS Simulator IPA (Working Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 15 # CRITICAL FIX: Reduced timeout to prevent hanging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
      
    - name: Install dependencies
      run: |
        echo "📦 Resolving dependencies..."
        xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
        
    - name: Clean environment
      run: |
        echo "🧹 Cleaning build environment..."
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ./DerivedData
        rm -rf ./build
        
    - name: List available simulators
      run: |
        echo "📱 Available simulators:"
        xcrun simctl list devices available
        
    - name: Create and boot iOS Simulator with CRITICAL TIMEOUT FIX
      run: |
        echo "📱 Creating and booting iOS Simulator with CRITICAL TIMEOUT FIX..."
        
        # CRITICAL FIX: Kill any existing simulator processes first
        echo "🔧 Killing existing simulator processes..."
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService 2>/dev/null || true
        sudo killall -9 Simulator 2>/dev/null || true
        
        # List available iOS runtimes first
        echo "📱 Available iOS runtimes:"
        xcrun simctl list runtimes | grep iOS
        
        # Use available iOS runtime (usually latest)
        IOS_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
        echo "📱 Using iOS runtime: $IOS_RUNTIME"
        
        # Delete existing simulator if it exists
        xcrun simctl delete "VividAI-Test" 2>/dev/null || true
        
        # Create simulator with available runtime
        xcrun simctl create "VividAI-Test" "iPhone 16" "$IOS_RUNTIME" || echo "Simulator already exists"
        
        # CRITICAL FIX: Boot simulator with strict timeout using background process
        echo "🔧 Booting simulator with strict timeout..."
        
        # Start boot process in background
        xcrun simctl boot "VividAI-Test" &
        BOOT_PID=$!
        
        # Wait for boot with timeout
        TIMEOUT=60
        COUNTER=0
        
        while [ $COUNTER -lt $TIMEOUT ]; do
          if kill -0 $BOOT_PID 2>/dev/null; then
            echo "⏳ Boot process still running... ($COUNTER/$TIMEOUT)"
            sleep 2
            COUNTER=$((COUNTER + 2))
          else
            echo "✅ Boot process completed"
            break
          fi
        done
        
        # Kill boot process if it's still running
        if kill -0 $BOOT_PID 2>/dev/null; then
          echo "⚠️ Boot process timed out, killing..."
          kill -9 $BOOT_PID 2>/dev/null || true
        fi
        
        # Check if simulator is actually booted
        echo "🔍 Checking simulator status..."
        if xcrun simctl list devices | grep "VividAI-Test" | grep "Booted"; then
          echo "✅ Simulator is booted successfully"
        else
          echo "⚠️ Simulator boot failed, but continuing with build..."
        fi
        
    - name: Build for iOS Device using ULTIMATE SOLUTION
      run: |
        echo "🔨 Building for iOS Device using ULTIMATE SOLUTION..."
        echo "📱 Target: iOS Device (not simulator)"
        echo "📱 App: VividAI (Firebase-integrated complex app)"
        
        set -e
        
        echo "📁 Current directory contents before build:"
        ls -la ./
        
        # Kill any lingering simulator processes that could cause runtime conflicts
        echo "🔧 Killing lingering simulator processes..."
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService 2>/dev/null || true
        
        # FINAL SOLUTION: Build with comprehensive logging and explicit target
        echo "🔨 Starting xcodebuild build for iOS Device (FINAL SOLUTION)..."
        echo "📱 Building VividAI target explicitly..."
        
        # Build with explicit target and comprehensive logging
        xcodebuild build \
          -project VividAI.xcodeproj \
          -target VividAI \
          -scheme VividAI \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          DEVELOPMENT_TEAM="" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PROVISIONING_PROFILE="" \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          ASSETCATALOG_COMPILER_OPTIMIZATION=space \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
          SUPPORTED_PLATFORMS="iphoneos" \
          VALID_ARCHS="arm64" \
          ARCHS="arm64" \
          EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
          -allowProvisioningUpdates \
          -resolvePackageDependencies \
          -verbose \
          -showBuildTimingSummary \
          2>&1 | tee build_output.log
        
        echo "✅ Build completed!"
        
        # Check build output for errors
        echo "📁 Build output analysis:"
        if grep -i "error" build_output.log; then
          echo "❌ Build errors found:"
          grep -i "error" build_output.log
        else
          echo "✅ No build errors found"
        fi
        
        if grep -i "warning" build_output.log; then
          echo "⚠️ Build warnings found:"
          grep -i "warning" build_output.log
        else
          echo "✅ No build warnings found"
        fi
        
        # Check if build actually built anything
        echo "📁 Build completion analysis:"
        if grep -i "build succeeded" build_output.log; then
          echo "✅ Build succeeded"
        else
          echo "❌ Build did not succeed"
        fi
        
        if grep -i "target" build_output.log; then
          echo "📁 Target information:"
          grep -i "target" build_output.log | head -5
        fi
        
        # Show last 20 lines of build output for debugging
        echo "📁 Last 20 lines of build output:"
        tail -20 build_output.log
        
        echo "📁 Current directory contents after build:"
        ls -la ./
        
        echo "📁 DerivedData contents after build:"
        ls -la ./DerivedData/ || echo "DerivedData directory not found"
        
        echo "📁 Looking for any build products:"
        find ./DerivedData -name "*.app" -type d || echo "No .app files in DerivedData"
        find ./DerivedData -name "*.framework" -type d || echo "No .framework files in DerivedData"
        find ./DerivedData -name "*.dylib" -type f || echo "No .dylib files in DerivedData"
        
        echo "📁 Build products analysis:"
        if [ -d "./DerivedData/Build" ]; then
          echo "✅ Build directory exists"
          find ./DerivedData/Build -type d | head -10
        else
          echo "❌ Build directory does not exist"
        fi
        
        echo "📁 Looking for any .app files anywhere:"
        find . -name "*.app" -type d || echo "No .app files found"
        
        echo "📁 Looking for any build products:"
        find . -name "*VividAI*" -type d || echo "No VividAI products found"
        
        echo "📁 Looking in DerivedData:"
        find ./DerivedData -name "*.app" -type d || echo "No .app files in DerivedData"
        
        echo "📁 Looking in build directories:"
        find . -name "*Build*" -type d || echo "No Build directories found"
        
        echo "📁 Looking in Products directories:"
        find . -name "*Products*" -type d || echo "No Products directories found"
        
        # ULTIMATE FALLBACK: Try building without explicit target
        if [ ! -d "./DerivedData/Build" ] || [ -z "$(find ./DerivedData -name "*.app" -type d)" ]; then
          echo "🔄 ULTIMATE FALLBACK: Trying build without explicit target..."
          
          xcodebuild build \
            -project VividAI.xcodeproj \
            -scheme VividAI \
            -destination 'generic/platform=iOS' \
            -configuration Release \
            -derivedDataPath ./DerivedData \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE="" \
            SUPPORTED_PLATFORMS="iphoneos" \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
            -allowProvisioningUpdates \
            -resolvePackageDependencies \
            -verbose \
            2>&1 | tee build_output_fallback.log
          
          echo "📁 Fallback build output analysis:"
          if grep -i "error" build_output_fallback.log; then
            echo "❌ Fallback build errors found:"
            grep -i "error" build_output_fallback.log
          else
            echo "✅ No fallback build errors found"
          fi
          
          echo "📁 Last 20 lines of fallback build output:"
          tail -20 build_output_fallback.log
          
          echo "📁 Checking for app bundles after fallback build:"
          find ./DerivedData -name "*.app" -type d || echo "No .app files in DerivedData after fallback"
        fi
        
    - name: Find app bundle using COMPREHENSIVE SEARCH
      run: |
        echo "🔍 Looking for app bundle using COMPREHENSIVE SEARCH..."
        
        # Search in multiple locations for app bundle
        echo "📁 Searching for app bundle in all possible locations..."
        
        # REAL SOLUTION: Use showBuildSettings to get actual build paths
        echo "🔍 Getting actual build settings..."
        BUILD_SETTINGS=$(xcodebuild -project VividAI.xcodeproj -scheme VividAI -configuration Release -showBuildSettings | grep -E "(TARGET_BUILD_DIR|BUILT_PRODUCTS_DIR|CONFIGURATION_BUILD_DIR)")
        echo "📁 Build settings:"
        echo "$BUILD_SETTINGS"
        
        # Extract actual build directory from build settings
        TARGET_BUILD_DIR=$(xcodebuild -project VividAI.xcodeproj -scheme VividAI -configuration Release -showBuildSettings | grep "TARGET_BUILD_DIR" | head -1 | cut -d'=' -f2 | xargs)
        BUILT_PRODUCTS_DIR=$(xcodebuild -project VividAI.xcodeproj -scheme VividAI -configuration Release -showBuildSettings | grep "BUILT_PRODUCTS_DIR" | head -1 | cut -d'=' -f2 | xargs)
        
        echo "📁 TARGET_BUILD_DIR: $TARGET_BUILD_DIR"
        echo "📁 BUILT_PRODUCTS_DIR: $BUILT_PRODUCTS_DIR"
        
        # REAL SOLUTION: Look for app bundle in actual build directories
        echo "📁 Searching in actual build directories..."
        APP_PATH=""
        
        # Method 1: Look in TARGET_BUILD_DIR
        if [ -n "$TARGET_BUILD_DIR" ] && [ -d "$TARGET_BUILD_DIR" ]; then
          echo "📁 Searching in TARGET_BUILD_DIR: $TARGET_BUILD_DIR"
          APP_PATH=$(find "$TARGET_BUILD_DIR" -name "VividAI.app" -type d | head -1)
        fi
        
        # Method 2: Look in BUILT_PRODUCTS_DIR
        if [ -z "$APP_PATH" ] && [ -n "$BUILT_PRODUCTS_DIR" ] && [ -d "$BUILT_PRODUCTS_DIR" ]; then
          echo "📁 Searching in BUILT_PRODUCTS_DIR: $BUILT_PRODUCTS_DIR"
          APP_PATH=$(find "$BUILT_PRODUCTS_DIR" -name "VividAI.app" -type d | head -1)
        fi
        
        # Method 3: Look in DerivedData with actual paths
        if [ -z "$APP_PATH" ]; then
          echo "📁 Searching in DerivedData with actual paths..."
          APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
        fi
        
        # Method 4: Look anywhere in current directory
        if [ -z "$APP_PATH" ]; then
          echo "📁 Searching anywhere in current directory..."
          APP_PATH=$(find . -name "VividAI.app" -type d | head -1)
        fi
        
        # Check if app bundle was found
        if [ -z "$APP_PATH" ]; then
          echo "❌ App bundle not found anywhere!"
          echo "📁 Final search - all directories:"
          find . -type d | head -20 || echo "No directories found"
          echo "📁 Final search - all files:"
          find . -type f | head -20 || echo "No files found"
          exit 1
        fi
        
        echo "✅ App bundle found at: $APP_PATH"
        echo "📱 App bundle size: $(du -sh "$APP_PATH")"
        
        # Verify app bundle contents
        echo "📱 App bundle contents:"
        ls -la "$APP_PATH"
        
        # Verify it's a valid app bundle
        if [ ! -f "$APP_PATH/Info.plist" ]; then
          echo "❌ Invalid app bundle - missing Info.plist"
          exit 1
        fi
        
        echo "✅ App bundle is valid"
        
        # Set APP_PATH as an output for subsequent steps
        echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
    - name: Create IPA file
      run: |
        echo "📦 Creating IPA file..."
        
        # Create Payload directory
        mkdir -p ./Payload
        
        # Copy app bundle to Payload
        cp -R "$APP_PATH" ./Payload/
        
        # Create IPA file
        zip -r VividAI-Simulator.ipa ./Payload
        
        echo "✅ IPA file created: VividAI-Simulator.ipa"
        echo "📱 IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
    - name: Verify IPA file
      run: |
        echo "🔍 Verifying IPA file..."
        
        if [ ! -f "VividAI-Simulator.ipa" ]; then
          echo "❌ IPA file not found!"
          exit 1
        fi
        
        echo "✅ IPA file exists"
        echo "📱 IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
        # List contents of IPA
        echo "📦 IPA contents:"
        unzip -l VividAI-Simulator.ipa | head -20
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: VividAI-Simulator-IPA
        path: VividAI-Simulator.ipa
        retention-days: 30
        
    - name: Cleanup
      run: |
        echo "🧹 Cleaning up..."
        rm -rf ./Payload
        rm -rf ./DerivedData
        rm -rf ./build
        
        # Shutdown simulator
        xcrun simctl shutdown "VividAI-Test" || echo "Simulator already shutdown"
        xcrun simctl delete "VividAI-Test" || echo "Simulator already deleted"
