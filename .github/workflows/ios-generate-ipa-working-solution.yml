name: Generate iOS Device IPA (Working Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 15 # CRITICAL FIX: Reduced timeout to prevent hanging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        
      - name: Install dependencies
        run: |
          echo "üì¶ Resolving dependencies..."
          xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
          
      - name: Clean environment
        run: |
          echo "üßπ Cleaning build environment..."
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ./DerivedData
          rm -rf ./build
          rm -rf ./archive
          
      - name: Build for iOS Device using ULTIMATE SOLUTION
        run: |
          echo "üî® Building for iOS Device using ULTIMATE SOLUTION..."
          echo "üì± Building VividAI app for iOS Device..."
          
          set -e
          
          echo "üìÅ Current directory contents before build:"
          ls -la ./
          
          # Create archive directory
          mkdir -p ./archive
          
          # ULTIMATE SOLUTION: Use archive for iOS Device builds (like SketchAI)
          echo "üî® Starting xcodebuild archive for iOS Device..."
          xcodebuild archive \
            -project VividAI.xcodeproj \
            -scheme VividAI \
            -destination 'generic/platform=iOS' \
            -configuration Release \
            -archivePath ./archive/VividAI.xcarchive \
            -derivedDataPath ./DerivedData \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE="" \
            ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
            ASSETCATALOG_COMPILER_OPTIMIZATION=space \
            ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
            ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
            SUPPORTED_PLATFORMS="iphoneos" \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
            -allowProvisioningUpdates \
            -resolvePackageDependencies \
            -verbose \
            -showBuildTimingSummary \
            2>&1 | tee build_output.log
          
          echo "‚úÖ Archive completed!"
          
          # Check build output for errors
          echo "üìÅ Build output analysis:"
          if grep -i "error" build_output.log; then
            echo "‚ùå Build errors found:"
            grep -i "error" build_output.log
          else
            echo "‚úÖ No build errors found"
          fi
          
          if grep -i "warning" build_output.log; then
            echo "‚ö†Ô∏è Build warnings found:"
            grep -i "warning" build_output.log
          else
            echo "‚úÖ No build warnings found"
          fi
          
          # Check if archive was created
          echo "üìÅ Archive creation analysis:"
          if [ -d "./archive/VividAI.xcarchive" ]; then
            echo "‚úÖ Archive created successfully"
            echo "üìÅ Archive size: $(du -sh ./archive/VividAI.xcarchive)"
          else
            echo "‚ùå Archive not created"
            echo "üìÅ Archive directory contents:"
            ls -la ./archive/ || echo "Archive directory not found"
            exit 1
          fi
          
      - name: Find app bundle in archive
        run: |
          echo "üîç Looking for app bundle in archive..."
          
          echo "üìÅ Current directory contents:"
          ls -la ./
          
          echo "üìÅ Archive directory contents:"
          ls -la ./archive/ || echo "Archive directory not found"
          
          # Check if archive was created
          if [ ! -d "./archive/VividAI.xcarchive" ]; then
            echo "‚ùå Archive not found!"
            echo "üìÅ Archive directory contents:"
            ls -la ./archive/ || echo "Archive directory not found"
            
            echo "üìÅ Looking for any .xcarchive files in current directory:"
            find . -name "*.xcarchive" -type d || echo "No .xcarchive files found"
            
            echo "üìÅ Looking for any .app files in current directory:"
            find . -name "*.app" -type d || echo "No .app files found"
            
            exit 1
          fi
          
          echo "‚úÖ Archive found at: ./archive/VividAI.xcarchive"
          
          echo "üìÅ Archive contents:"
          ls -la ./archive/VividAI.xcarchive/
          
          echo "üìÅ Archive Products directory:"
          ls -la ./archive/VividAI.xcarchive/Products/ || echo "Products directory not found"
          
          echo "üìÅ Archive Applications directory:"
          ls -la ./archive/VividAI.xcarchive/Products/Applications/ || echo "Applications directory not found"
          
          # Find app bundle in archive
          APP_PATH=$(find ./archive/VividAI.xcarchive/Products/Applications -name "VividAI.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found in archive"
            echo "üìÅ Archive contents:"
            find ./archive/VividAI.xcarchive -name "*.app" -type d || echo "No .app files found in archive"
            echo "üìÅ Archive structure:"
            find ./archive/VividAI.xcarchive -type d | head -20
            exit 1
          fi
          
          echo "‚úÖ App bundle found in archive at: $APP_PATH"
          echo "üì± App bundle size: $(du -sh "$APP_PATH")"
          
          # Verify app bundle contents
          echo "üì± App bundle contents:"
          ls -la "$APP_PATH"
          
          # Verify it's a valid app bundle
          if [ ! -f "$APP_PATH/Info.plist" ]; then
            echo "‚ùå Invalid app bundle - missing Info.plist"
            exit 1
          fi
          
          echo "‚úÖ App bundle is valid"
          
          # Set APP_PATH as an output for subsequent steps
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
      - name: Create IPA file
        run: |
          echo "üì¶ Creating IPA file..."
          
          # Create Payload directory
          mkdir -p ./Payload
          
          # Copy app bundle to Payload
          cp -R "$APP_PATH" ./Payload/
          
          # Create IPA file
          zip -r VividAI-Device.ipa ./Payload
          
          echo "‚úÖ IPA file created: VividAI-Device.ipa"
          echo "üì± IPA file size: $(du -sh VividAI-Device.ipa)"
        
      - name: Verify IPA file
        run: |
          echo "üîç Verifying IPA file..."
          
          if [ ! -f "VividAI-Device.ipa" ]; then
            echo "‚ùå IPA file not found!"
            exit 1
          fi
          
          echo "‚úÖ IPA file exists"
          echo "üì± IPA file size: $(du -sh VividAI-Device.ipa)"
          
          # List contents of IPA
          echo "üì¶ IPA contents:"
          unzip -l VividAI-Device.ipa | head -20
        
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: VividAI-Device-IPA
          path: VividAI-Device.ipa
          retention-days: 30
        
      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          rm -rf ./Payload
          rm -rf ./DerivedData
          rm -rf ./build
          rm -rf ./archive