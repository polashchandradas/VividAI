name: Generate iOS Simulator IPA (Working Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
      
    - name: Install dependencies
      run: |
        echo "üì¶ Resolving dependencies..."
        xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
        
    - name: Clean environment
      run: |
        echo "üßπ Cleaning build environment..."
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ./DerivedData
        rm -rf ./build
        
    - name: List available simulators
      run: |
        echo "üì± Available simulators:"
        xcrun simctl list devices available
        
    - name: Create and boot iOS Simulator
      run: |
        echo "üì± Creating and booting iOS Simulator..."
        
        # List available runtimes first
        echo "üì± Available iOS runtimes:"
        xcrun simctl list runtimes | grep iOS
        
        # Use available iOS runtime (usually latest)
        IOS_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
        echo "üì± Using iOS runtime: $IOS_RUNTIME"
        
        # Create simulator with available runtime
        xcrun simctl create "VividAI-Test" "iPhone 16" "$IOS_RUNTIME" || echo "Simulator already exists"
        
        # Boot simulator without timeout (use gtimeout if available, otherwise just boot)
        if command -v gtimeout >/dev/null 2>&1; then
          gtimeout 30 xcrun simctl boot "VividAI-Test" || echo "Simulator boot timeout or already booted"
        else
          xcrun simctl boot "VividAI-Test" || echo "Simulator already booted"
        fi
        
        # Wait for simulator to be ready
        xcrun simctl bootstatus "VividAI-Test" -b || echo "Simulator status check failed"
        
    - name: Build for iOS Simulator using REAL SOLUTION
      run: |
        echo "üî® Building for iOS Simulator using REAL SOLUTION..."
        echo "üì± Target: VividAI-Test"
        echo "üì± App: VividAI (Firebase-integrated complex app)"
        
        set -e
        
        echo "üìÅ Current directory contents before build:"
        ls -la ./
        
        echo "üìÅ DerivedData contents before build:"
        ls -la ./DerivedData/ || echo "DerivedData directory not found"
        
        # REAL SOLUTION: Use build-for-testing which creates test bundles
        # Then extract the app bundle from the test bundle
        echo "üî® Starting xcodebuild build-for-testing (REAL SOLUTION)..."
        xcodebuild build-for-testing \
          -project VividAI.xcodeproj \
          -scheme VividAI \
          -destination 'platform=iOS Simulator,name=VividAI-Test' \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -resolvePackageDependencies \
          -verbose \
          -showBuildTimingSummary
        
        echo "‚úÖ Build-for-testing completed successfully!"
        
        echo "üìÅ Current directory contents after build:"
        ls -la ./
        
        echo "üìÅ DerivedData contents after build:"
        ls -la ./DerivedData/ || echo "DerivedData directory not found"
        
        echo "üìÅ DerivedData subdirectories:"
        find ./DerivedData -type d | head -20 || echo "No directories found"
        
        echo "üìÅ Looking for any .app files:"
        find . -name "*.app" -type d || echo "No .app files found"
        
        echo "üìÅ Looking for any .xctest files:"
        find . -name "*.xctest" -type d || echo "No .xctest files found"
        
        echo "üìÅ Looking for any test bundles:"
        find ./DerivedData -name "*Test*" -type d || echo "No test bundles found"
        
        echo "üìÅ Looking for any build products:"
        find ./DerivedData -name "*VividAI*" -type d || echo "No VividAI products found"
        
        echo "üìÅ Looking for any build directories:"
        find ./DerivedData -name "*Build*" -type d || echo "No Build directories found"
        
        echo "üìÅ Looking for any Products directories:"
        find ./DerivedData -name "*Products*" -type d || echo "No Products directories found"
        
    - name: Find app bundle using REAL SOLUTION search
      run: |
        echo "üîç Looking for app bundle using REAL SOLUTION search..."
        
        # REAL SOLUTION: Look for test bundles and extract app bundles
        echo "üìÅ Searching for test bundles (.xctest files):"
        TEST_BUNDLES=$(find ./DerivedData -name "*.xctest" -type d)
        
        if [ -n "$TEST_BUNDLES" ]; then
          echo "‚úÖ Test bundles found:"
          echo "$TEST_BUNDLES"
          
          # Look for app bundles in test bundle directories
          echo "üìÅ Searching for app bundles in test bundle directories:"
          for test_bundle in $TEST_BUNDLES; do
            echo "üìÅ Checking test bundle: $test_bundle"
            APP_PATH=$(find "$test_bundle" -name "VividAI.app" -type d | head -1)
            if [ -n "$APP_PATH" ]; then
              echo "‚úÖ App bundle found in test bundle: $APP_PATH"
              break
            fi
          done
        else
          echo "‚ùå No test bundles found"
        fi
        
        # Method 1: Check DerivedData/Build/Products/Release-iphonesimulator
        if [ -z "$APP_PATH" ]; then
          APP_PATH=$(find ./DerivedData/Build/Products/Release-iphonesimulator -name "VividAI.app" -type d | head -1)
        fi
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå App bundle not found in Release-iphonesimulator"
          echo "üìÅ Searching in Release-iphonesimulator:"
          find ./DerivedData/Build/Products/Release-iphonesimulator -name "*.app" -type d || echo "No .app files found"
          
          # Method 2: Check DerivedData/Build/Products/Debug-iphonesimulator
          APP_PATH=$(find ./DerivedData/Build/Products/Debug-iphonesimulator -name "VividAI.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found in Debug-iphonesimulator"
            echo "üìÅ Searching in Debug-iphonesimulator:"
            find ./DerivedData/Build/Products/Debug-iphonesimulator -name "*.app" -type d || echo "No .app files found"
            
            # Method 3: Check entire DerivedData directory
            APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
            
            if [ -z "$APP_PATH" ]; then
              echo "‚ùå App bundle not found in DerivedData"
              echo "üìÅ Searching in DerivedData:"
              find ./DerivedData -name "*.app" -type d || echo "No .app files found"
              
              # Method 4: Check if build was successful by looking for any VividAI.app
              echo "üìÅ Searching for any VividAI.app:"
              find . -name "VividAI.app" -type d || echo "No VividAI.app found"
              
              # Method 5: Check the build output directory
              echo "üìÅ Checking build output:"
              find . -name "*.app" -type d || echo "No .app files found in current directory"
              
              # Method 6: Check for any .app files in the entire project
              echo "üìÅ Checking for any .app files:"
              find . -name "*.app" -type d || echo "No .app files found anywhere"
              
              # Method 7: List all files in DerivedData to see what was created
              echo "üìÅ DerivedData contents:"
              find ./DerivedData -type f | head -20 || echo "No files in DerivedData"
              
              # Method 8: Check if the build actually created anything
              echo "üìÅ Build output analysis:"
              ls -la ./DerivedData/ || echo "DerivedData directory not found"
              
              exit 1
            fi
          fi
        fi
        
        echo "‚úÖ App bundle found at: $APP_PATH"
        echo "üì± App bundle size: $(du -sh "$APP_PATH")"
        
        # Verify app bundle contents
        echo "üì± App bundle contents:"
        ls -la "$APP_PATH"
        
        # Verify it's a valid app bundle
        if [ ! -f "$APP_PATH/Info.plist" ]; then
          echo "‚ùå Invalid app bundle - missing Info.plist"
          exit 1
        fi
        
        echo "‚úÖ App bundle is valid"
        
        # Set APP_PATH as an output for subsequent steps
        echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
    - name: Create IPA file
      run: |
        echo "üì¶ Creating IPA file..."
        
        # Create Payload directory
        mkdir -p ./Payload
        
        # Copy app bundle to Payload
        cp -R "$APP_PATH" ./Payload/
        
        # Create IPA file
        zip -r VividAI-Simulator.ipa ./Payload
        
        echo "‚úÖ IPA file created: VividAI-Simulator.ipa"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
    - name: Verify IPA file
      run: |
        echo "üîç Verifying IPA file..."
        
        if [ ! -f "VividAI-Simulator.ipa" ]; then
          echo "‚ùå IPA file not found!"
          exit 1
        fi
        
        echo "‚úÖ IPA file exists"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
        # List contents of IPA
        echo "üì¶ IPA contents:"
        unzip -l VividAI-Simulator.ipa | head -20
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: VividAI-Simulator-IPA
        path: VividAI-Simulator.ipa
        retention-days: 30
        
    - name: Cleanup
      run: |
        echo "üßπ Cleaning up..."
        rm -rf ./Payload
        rm -rf ./DerivedData
        rm -rf ./build
        
        # Shutdown simulator
        xcrun simctl shutdown "VividAI-Test" || echo "Simulator already shutdown"
        xcrun simctl delete "VividAI-Test" || echo "Simulator already deleted"
