name: Generate iOS Device IPA (Working Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 15 # CRITICAL FIX: Reduced timeout to prevent hanging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        
      - name: Install dependencies
        run: |
          echo "üì¶ Resolving dependencies..."
          xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
          
      - name: Clean environment
        run: |
          echo "üßπ Cleaning build environment..."
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ./DerivedData
          rm -rf ./build
          rm -rf ./archive
          
      - name: Build for iOS Device using REAL SOLUTION
        run: |
          echo "üî® Building for iOS Device using REAL SOLUTION..."
          echo "üì± Building VividAI app for iOS Device..."
          
          set -e
          
          echo "üìÅ Current directory contents before build:"
          ls -la ./
          
          # REAL SOLUTION: Use build and search system DerivedData
          echo "üî® Starting xcodebuild build for iOS Device..."
          xcodebuild build \
            -project VividAI.xcodeproj \
            -scheme VividAI \
            -destination 'generic/platform=iOS' \
            -configuration Release \
            -derivedDataPath ./DerivedData \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE="" \
            ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
            ASSETCATALOG_COMPILER_OPTIMIZATION=space \
            ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
            ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
            SUPPORTED_PLATFORMS="iphoneos" \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
            -allowProvisioningUpdates \
            -resolvePackageDependencies \
            -verbose \
            -showBuildTimingSummary \
            2>&1 | tee build_output.log
          
          echo "‚úÖ Build completed!"
          
          # Check build output for errors
          echo "üìÅ Build output analysis:"
          if grep -i "error" build_output.log; then
            echo "‚ùå Build errors found:"
            grep -i "error" build_output.log
          else
            echo "‚úÖ No build errors found"
          fi
          
          if grep -i "warning" build_output.log; then
            echo "‚ö†Ô∏è Build warnings found:"
            grep -i "warning" build_output.log
          else
            echo "‚úÖ No build warnings found"
          fi
          
          # Check if build succeeded
          echo "üìÅ Build completion analysis:"
          if grep -i "build succeeded" build_output.log; then
            echo "‚úÖ Build succeeded"
          else
            echo "‚ùå Build did not succeed"
          fi
          
      - name: Find app bundle using REAL SOLUTION
        run: |
          echo "üîç Looking for app bundle using REAL SOLUTION..."
          
          # Search in multiple locations for app bundle
          echo "üìÅ Searching for app bundle in all possible locations..."
          
          # REAL SOLUTION: Use showBuildSettings to get actual build paths
          echo "üîç Getting actual build settings..."
          BUILD_SETTINGS=$(xcodebuild -project VividAI.xcodeproj -scheme VividAI -configuration Release -showBuildSettings | grep -E "(TARGET_BUILD_DIR|BUILT_PRODUCTS_DIR|CONFIGURATION_BUILD_DIR)")
          echo "üìÅ Build settings:"
          echo "$BUILD_SETTINGS"
          
          # Extract actual build directory from build settings
          TARGET_BUILD_DIR=$(xcodebuild -project VividAI.xcodeproj -scheme VividAI -configuration Release -showBuildSettings | grep "TARGET_BUILD_DIR" | head -1 | cut -d'=' -f2 | xargs)
          BUILT_PRODUCTS_DIR=$(xcodebuild -project VividAI.xcodeproj -scheme VividAI -configuration Release -showBuildSettings | grep "BUILT_PRODUCTS_DIR" | head -1 | cut -d'=' -f2 | xargs)
          
          echo "üìÅ TARGET_BUILD_DIR: $TARGET_BUILD_DIR"
          echo "üìÅ BUILT_PRODUCTS_DIR: $BUILT_PRODUCTS_DIR"
          
          # REAL SOLUTION: Look for app bundle in actual build directories
          echo "üìÅ Searching in actual build directories..."
          APP_PATH=""
          
          # Method 1: Look in TARGET_BUILD_DIR
          if [ -n "$TARGET_BUILD_DIR" ] && [ -d "$TARGET_BUILD_DIR" ]; then
            echo "üìÅ Searching in TARGET_BUILD_DIR: $TARGET_BUILD_DIR"
            APP_PATH=$(find "$TARGET_BUILD_DIR" -name "VividAI.app" -type d | head -1)
          fi
          
          # Method 2: Look in BUILT_PRODUCTS_DIR
          if [ -z "$APP_PATH" ] && [ -n "$BUILT_PRODUCTS_DIR" ] && [ -d "$BUILT_PRODUCTS_DIR" ]; then
            echo "üìÅ Searching in BUILT_PRODUCTS_DIR: $BUILT_PRODUCTS_DIR"
            APP_PATH=$(find "$BUILT_PRODUCTS_DIR" -name "VividAI.app" -type d | head -1)
          fi
          
          # Method 3: Look in system DerivedData (ROOT CAUSE FIX)
          if [ -z "$APP_PATH" ]; then
            echo "üìÅ Searching in system DerivedData (ROOT CAUSE FIX)..."
            SYSTEM_DERIVED_DATA="/Users/runner/Library/Developer/Xcode/DerivedData"
            if [ -d "$SYSTEM_DERIVED_DATA" ]; then
              echo "üìÅ System DerivedData exists: $SYSTEM_DERIVED_DATA"
              APP_PATH=$(find "$SYSTEM_DERIVED_DATA" -name "VividAI.app" -type d | head -1)
              if [ -n "$APP_PATH" ]; then
                echo "‚úÖ Found app bundle in system DerivedData: $APP_PATH"
              else
                echo "‚ùå No app bundle found in system DerivedData"
              fi
            else
              echo "‚ùå System DerivedData does not exist"
            fi
          fi
          
          # Method 4: Look in local DerivedData with actual paths
          if [ -z "$APP_PATH" ]; then
            echo "üìÅ Searching in local DerivedData with actual paths..."
            APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
          fi
          
          # Method 5: Look anywhere in current directory
          if [ -z "$APP_PATH" ]; then
            echo "üìÅ Searching anywhere in current directory..."
            APP_PATH=$(find . -name "VividAI.app" -type d | head -1)
          fi
          
          # Check if app bundle was found
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found anywhere!"
            echo "üìÅ Final search - all directories:"
            find . -type d | head -20 || echo "No directories found"
            echo "üìÅ Final search - all files:"
            find . -type f | head -20 || echo "No files found"
            exit 1
          fi
          
          echo "‚úÖ App bundle found at: $APP_PATH"
          echo "üì± App bundle size: $(du -sh "$APP_PATH")"
          
          # Verify app bundle contents
          echo "üì± App bundle contents:"
          ls -la "$APP_PATH"
          
          # Verify it's a valid app bundle
          if [ ! -f "$APP_PATH/Info.plist" ]; then
            echo "‚ùå Invalid app bundle - missing Info.plist"
            exit 1
          fi
          
          echo "‚úÖ App bundle is valid"
          
          # Set APP_PATH as an output for subsequent steps
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
      - name: Create IPA file
        run: |
          echo "üì¶ Creating IPA file..."
          
          # Create Payload directory
          mkdir -p ./Payload
          
          # Copy app bundle to Payload
          cp -R "$APP_PATH" ./Payload/
          
          # Create IPA file
          zip -r VividAI-Device.ipa ./Payload
          
          echo "‚úÖ IPA file created: VividAI-Device.ipa"
          echo "üì± IPA file size: $(du -sh VividAI-Device.ipa)"
        
      - name: Verify IPA file
        run: |
          echo "üîç Verifying IPA file..."
          
          if [ ! -f "VividAI-Device.ipa" ]; then
            echo "‚ùå IPA file not found!"
            exit 1
          fi
          
          echo "‚úÖ IPA file exists"
          echo "üì± IPA file size: $(du -sh VividAI-Device.ipa)"
          
          # List contents of IPA
          echo "üì¶ IPA contents:"
          unzip -l VividAI-Device.ipa | head -20
        
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: VividAI-Device-IPA
          path: VividAI-Device.ipa
          retention-days: 30
        
      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          rm -rf ./Payload
          rm -rf ./DerivedData
          rm -rf ./build
          rm -rf ./archive