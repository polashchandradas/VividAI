name: Generate iOS Simulator IPA (Working Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 15 # CRITICAL FIX: Reduced timeout to prevent hanging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
      
    - name: Install dependencies
      run: |
        echo "üì¶ Resolving dependencies..."
        xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
        
    - name: Clean environment
      run: |
        echo "üßπ Cleaning build environment..."
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ./DerivedData
        rm -rf ./build
        
    - name: List available simulators
      run: |
        echo "üì± Available simulators:"
        xcrun simctl list devices available
        
    - name: Create and boot iOS Simulator with CRITICAL TIMEOUT FIX
      run: |
        echo "üì± Creating and booting iOS Simulator with CRITICAL TIMEOUT FIX..."
        
        # CRITICAL FIX: Kill any existing simulator processes first
        echo "üîß Killing existing simulator processes..."
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService 2>/dev/null || true
        sudo killall -9 Simulator 2>/dev/null || true
        
        # List available iOS runtimes first
        echo "üì± Available iOS runtimes:"
        xcrun simctl list runtimes | grep iOS
        
        # Use available iOS runtime (usually latest)
        IOS_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
        echo "üì± Using iOS runtime: $IOS_RUNTIME"
        
        # Delete existing simulator if it exists
        xcrun simctl delete "VividAI-Test" 2>/dev/null || true
        
        # Create simulator with available runtime
        xcrun simctl create "VividAI-Test" "iPhone 16" "$IOS_RUNTIME" || echo "Simulator already exists"
        
        # CRITICAL FIX: Boot simulator with strict timeout using background process
        echo "üîß Booting simulator with strict timeout..."
        
        # Start boot process in background
        xcrun simctl boot "VividAI-Test" &
        BOOT_PID=$!
        
        # Wait for boot with timeout
        TIMEOUT=60
        COUNTER=0
        
        while [ $COUNTER -lt $TIMEOUT ]; do
          if kill -0 $BOOT_PID 2>/dev/null; then
            echo "‚è≥ Boot process still running... ($COUNTER/$TIMEOUT)"
            sleep 2
            COUNTER=$((COUNTER + 2))
          else
            echo "‚úÖ Boot process completed"
            break
          fi
        done
        
        # Kill boot process if it's still running
        if kill -0 $BOOT_PID 2>/dev/null; then
          echo "‚ö†Ô∏è Boot process timed out, killing..."
          kill -9 $BOOT_PID 2>/dev/null || true
        fi
        
        # Check if simulator is actually booted
        echo "üîç Checking simulator status..."
        if xcrun simctl list devices | grep "VividAI-Test" | grep "Booted"; then
          echo "‚úÖ Simulator is booted successfully"
        else
          echo "‚ö†Ô∏è Simulator boot failed, but continuing with build..."
        fi
        
    - name: Build for iOS Device using ULTIMATE SOLUTION
      run: |
        echo "üî® Building for iOS Device using ULTIMATE SOLUTION..."
        echo "üì± Target: iOS Device (not simulator)"
        echo "üì± App: VividAI (Firebase-integrated complex app)"
        
        set -e
        
        echo "üìÅ Current directory contents before build:"
        ls -la ./
        
        # Kill any lingering simulator processes that could cause runtime conflicts
        echo "üîß Killing lingering simulator processes..."
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService 2>/dev/null || true
        
        # ULTIMATE SOLUTION: Use build command with explicit output directory
        echo "üî® Starting xcodebuild build for iOS Device (ULTIMATE SOLUTION)..."
        xcodebuild build \
          -project VividAI.xcodeproj \
          -scheme VividAI \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          DEVELOPMENT_TEAM="" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PROVISIONING_PROFILE="" \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          ASSETCATALOG_COMPILER_OPTIMIZATION=space \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
          SUPPORTED_PLATFORMS="iphoneos" \
          VALID_ARCHS="arm64" \
          ARCHS="arm64" \
          EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
          -allowProvisioningUpdates \
          -resolvePackageDependencies \
          -verbose \
          -showBuildTimingSummary
        
        echo "‚úÖ Build completed successfully!"
        
        echo "üìÅ Current directory contents after build:"
        ls -la ./
        
        echo "üìÅ DerivedData contents after build:"
        ls -la ./DerivedData/ || echo "DerivedData directory not found"
        
        echo "üìÅ Looking for any .app files anywhere:"
        find . -name "*.app" -type d || echo "No .app files found"
        
        echo "üìÅ Looking for any build products:"
        find . -name "*VividAI*" -type d || echo "No VividAI products found"
        
        echo "üìÅ Looking in DerivedData:"
        find ./DerivedData -name "*.app" -type d || echo "No .app files in DerivedData"
        
        echo "üìÅ Looking in build directories:"
        find . -name "*Build*" -type d || echo "No Build directories found"
        
        echo "üìÅ Looking in Products directories:"
        find . -name "*Products*" -type d || echo "No Products directories found"
        
    - name: Find app bundle using COMPREHENSIVE SEARCH
      run: |
        echo "üîç Looking for app bundle using COMPREHENSIVE SEARCH..."
        
        # Search in multiple locations for app bundle
        echo "üìÅ Searching for app bundle in all possible locations..."
        
        # ULTIMATE SOLUTION: Look for app bundle in DerivedData Build Products
        echo "üìÅ Searching in DerivedData Build Products..."
        APP_PATH=$(find ./DerivedData/Build/Products/Release-iphoneos -name "VividAI.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå App bundle not found in Release-iphoneos"
          
          # Method 2: Look for app bundle in Debug-iphoneos
          echo "üìÅ Searching in Debug-iphoneos..."
          APP_PATH=$(find ./DerivedData/Build/Products/Debug-iphoneos -name "VividAI.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found in Debug-iphoneos"
            
            # Method 3: Look for app bundle anywhere in DerivedData
            echo "üìÅ Searching anywhere in DerivedData..."
            APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found in DerivedData"
            
            # Method 3: Look for any .app files anywhere
            echo "üìÅ Searching for any .app files anywhere..."
            APP_PATH=$(find . -name "*.app" -type d | head -1)
            
            if [ -z "$APP_PATH" ]; then
              echo "‚ùå No .app files found anywhere"
              
              # Method 4: Look for VividAI products
              echo "üìÅ Searching for VividAI products..."
              APP_PATH=$(find . -name "*VividAI*" -type d | head -1)
              
              if [ -z "$APP_PATH" ]; then
                echo "‚ùå No VividAI products found"
                
                # Method 5: Look in build directories
                echo "üìÅ Searching in build directories..."
                APP_PATH=$(find . -name "*Build*" -type d | head -1)
                
                if [ -z "$APP_PATH" ]; then
                  echo "‚ùå No build directories found"
                  
                  # Method 6: Look in Products directories
                  echo "üìÅ Searching in Products directories..."
                  APP_PATH=$(find . -name "*Products*" -type d | head -1)
                  
                  if [ -z "$APP_PATH" ]; then
                    echo "‚ùå No Products directories found"
                    echo "üìÅ Final search - all files:"
                    find . -type f | head -20 || echo "No files found"
                    exit 1
                  else
                    echo "‚úÖ Found Products directory: $APP_PATH"
                    # Look for app bundle in Products directory
                    APP_PATH=$(find "$APP_PATH" -name "VividAI.app" -type d | head -1)
                    if [ -z "$APP_PATH" ]; then
                      echo "‚ùå No VividAI.app found in Products directory"
                      exit 1
                    fi
                  fi
                else
                  echo "‚úÖ Found build directory: $APP_PATH"
                  # Look for app bundle in build directory
                  APP_PATH=$(find "$APP_PATH" -name "VividAI.app" -type d | head -1)
                  if [ -z "$APP_PATH" ]; then
                    echo "‚ùå No VividAI.app found in build directory"
                    exit 1
                  fi
                fi
              else
                echo "‚úÖ Found VividAI product: $APP_PATH"
                # Check if it's an app bundle
                if [ ! -f "$APP_PATH/Info.plist" ]; then
                  echo "‚ùå VividAI product is not an app bundle"
                  exit 1
                fi
              fi
            else
              echo "‚úÖ Found .app file: $APP_PATH"
              # Check if it's VividAI app
              if [[ "$APP_PATH" != *"VividAI.app" ]]; then
                echo "‚ùå Found .app file but it's not VividAI.app"
                exit 1
              fi
            fi
          else
            echo "‚úÖ App bundle found in DerivedData: $APP_PATH"
          fi
        else
          echo "‚úÖ App bundle found in archive: $APP_PATH"
        fi
        
        # SKETCHAI SUCCESS PATTERN: App bundle should be found in archive
        # No need for additional search methods since we're using device build
        
        echo "‚úÖ App bundle found at: $APP_PATH"
        echo "üì± App bundle size: $(du -sh "$APP_PATH")"
        
        # Verify app bundle contents
        echo "üì± App bundle contents:"
        ls -la "$APP_PATH"
        
        # Verify it's a valid app bundle
        if [ ! -f "$APP_PATH/Info.plist" ]; then
          echo "‚ùå Invalid app bundle - missing Info.plist"
          exit 1
        fi
        
        echo "‚úÖ App bundle is valid"
        
        # Set APP_PATH as an output for subsequent steps
        echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
    - name: Create IPA file
      run: |
        echo "üì¶ Creating IPA file..."
        
        # Create Payload directory
        mkdir -p ./Payload
        
        # Copy app bundle to Payload
        cp -R "$APP_PATH" ./Payload/
        
        # Create IPA file
        zip -r VividAI-Simulator.ipa ./Payload
        
        echo "‚úÖ IPA file created: VividAI-Simulator.ipa"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
    - name: Verify IPA file
      run: |
        echo "üîç Verifying IPA file..."
        
        if [ ! -f "VividAI-Simulator.ipa" ]; then
          echo "‚ùå IPA file not found!"
          exit 1
        fi
        
        echo "‚úÖ IPA file exists"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
        # List contents of IPA
        echo "üì¶ IPA contents:"
        unzip -l VividAI-Simulator.ipa | head -20
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: VividAI-Simulator-IPA
        path: VividAI-Simulator.ipa
        retention-days: 30
        
    - name: Cleanup
      run: |
        echo "üßπ Cleaning up..."
        rm -rf ./Payload
        rm -rf ./DerivedData
        rm -rf ./build
        
        # Shutdown simulator
        xcrun simctl shutdown "VividAI-Test" || echo "Simulator already shutdown"
        xcrun simctl delete "VividAI-Test" || echo "Simulator already deleted"
