name: Generate iOS Simulator IPA (Working Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
      
    - name: Install dependencies
      run: |
        echo "üì¶ Resolving dependencies..."
        xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
        
    - name: Clean environment
      run: |
        echo "üßπ Cleaning build environment..."
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ./DerivedData
        rm -rf ./build
        
    - name: List available simulators
      run: |
        echo "üì± Available simulators:"
        xcrun simctl list devices available
        
    - name: Create and boot iOS Simulator
      run: |
        echo "üì± Creating and booting iOS Simulator..."
        
        # List available runtimes first
        echo "üì± Available iOS runtimes:"
        xcrun simctl list runtimes | grep iOS
        
        # Use available iOS runtime (usually latest)
        IOS_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
        echo "üì± Using iOS runtime: $IOS_RUNTIME"
        
        # Create simulator with available runtime
        xcrun simctl create "VividAI-Test" "iPhone 16" "$IOS_RUNTIME" || echo "Simulator already exists"
        
        # Boot simulator without timeout (use gtimeout if available, otherwise just boot)
        if command -v gtimeout >/dev/null 2>&1; then
          gtimeout 30 xcrun simctl boot "VividAI-Test" || echo "Simulator boot timeout or already booted"
        else
          xcrun simctl boot "VividAI-Test" || echo "Simulator already booted"
        fi
        
        # Wait for simulator to be ready
        xcrun simctl bootstatus "VividAI-Test" -b || echo "Simulator status check failed"
        
    - name: Build for iOS Device using SKETCHAI SUCCESS PATTERN
      run: |
        echo "üî® Building for iOS Device using SKETCHAI SUCCESS PATTERN..."
        echo "üì± Target: iOS Device (not simulator)"
        echo "üì± App: VividAI (Firebase-integrated complex app)"
        
        set -e
        
        echo "üìÅ Current directory contents before build:"
        ls -la ./
        
        # Kill any lingering simulator processes that could cause runtime conflicts
        echo "üîß Killing lingering simulator processes..."
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService 2>/dev/null || true
        
        # SKETCHAI SUCCESS PATTERN: Build for device using generic/platform=iOS
        echo "üî® Starting xcodebuild archive for iOS Device (SKETCHAI SUCCESS PATTERN)..."
        xcodebuild archive \
          -project VividAI.xcodeproj \
          -scheme VividAI \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -archivePath ./VividAI.xcarchive \
          DEVELOPMENT_TEAM="" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PROVISIONING_PROFILE="" \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          ASSETCATALOG_COMPILER_OPTIMIZATION=space \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
          SUPPORTED_PLATFORMS="iphoneos" \
          VALID_ARCHS="arm64" \
          ARCHS="arm64" \
          EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
          -allowProvisioningUpdates \
          -resolvePackageDependencies \
          -verbose \
          -showBuildTimingSummary
        
        echo "‚úÖ Archive completed successfully!"
        
        echo "üìÅ Current directory contents after archive:"
        ls -la ./
        
        echo "üìÅ Archive contents:"
        ls -la ./VividAI.xcarchive/ || echo "Archive not found"
        
        echo "üìÅ Looking for any .app files in archive:"
        find ./VividAI.xcarchive -name "*.app" -type d || echo "No .app files found in archive"
        
        echo "üìÅ Looking for any .xcarchive files:"
        find . -name "*.xcarchive" -type d || echo "No .xcarchive files found"
        
    - name: Find app bundle using SKETCHAI SUCCESS PATTERN
      run: |
        echo "üîç Looking for app bundle using SKETCHAI SUCCESS PATTERN..."
        
        # SKETCHAI SUCCESS PATTERN: Look for app bundle in archive
        echo "üìÅ Searching for app bundle in archive..."
        APP_PATH=$(find ./VividAI.xcarchive -name "VividAI.app" -type d | head -1)
        
        if [ -n "$APP_PATH" ]; then
          echo "‚úÖ App bundle found in archive: $APP_PATH"
        else
          echo "‚ùå App bundle not found in archive"
          echo "üìÅ Archive contents:"
          ls -la ./VividAI.xcarchive/ || echo "Archive not found"
          
          echo "üìÅ Looking for any .app files in archive:"
          find ./VividAI.xcarchive -name "*.app" -type d || echo "No .app files found in archive"
          
          echo "üìÅ Archive structure:"
          find ./VividAI.xcarchive -type d | head -20 || echo "No directories found"
          
          exit 1
        fi
        
        # SKETCHAI SUCCESS PATTERN: App bundle should be found in archive
        # No need for additional search methods since we're using device build
        
        echo "‚úÖ App bundle found at: $APP_PATH"
        echo "üì± App bundle size: $(du -sh "$APP_PATH")"
        
        # Verify app bundle contents
        echo "üì± App bundle contents:"
        ls -la "$APP_PATH"
        
        # Verify it's a valid app bundle
        if [ ! -f "$APP_PATH/Info.plist" ]; then
          echo "‚ùå Invalid app bundle - missing Info.plist"
          exit 1
        fi
        
        echo "‚úÖ App bundle is valid"
        
        # Set APP_PATH as an output for subsequent steps
        echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
    - name: Create IPA file
      run: |
        echo "üì¶ Creating IPA file..."
        
        # Create Payload directory
        mkdir -p ./Payload
        
        # Copy app bundle to Payload
        cp -R "$APP_PATH" ./Payload/
        
        # Create IPA file
        zip -r VividAI-Simulator.ipa ./Payload
        
        echo "‚úÖ IPA file created: VividAI-Simulator.ipa"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
    - name: Verify IPA file
      run: |
        echo "üîç Verifying IPA file..."
        
        if [ ! -f "VividAI-Simulator.ipa" ]; then
          echo "‚ùå IPA file not found!"
          exit 1
        fi
        
        echo "‚úÖ IPA file exists"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
        # List contents of IPA
        echo "üì¶ IPA contents:"
        unzip -l VividAI-Simulator.ipa | head -20
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: VividAI-Simulator-IPA
        path: VividAI-Simulator.ipa
        retention-days: 30
        
    - name: Cleanup
      run: |
        echo "üßπ Cleaning up..."
        rm -rf ./Payload
        rm -rf ./DerivedData
        rm -rf ./build
        
        # Shutdown simulator
        xcrun simctl shutdown "VividAI-Test" || echo "Simulator already shutdown"
        xcrun simctl delete "VividAI-Test" || echo "Simulator already deleted"
