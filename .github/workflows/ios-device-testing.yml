name: iOS App Testing & Installation Verification

on:
  # Disabled push trigger - only run manually
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        
      # CRITICAL OPTIMIZATION: Cache CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      
      - name: Install CocoaPods dependencies
        run: |
          echo "üì¶ Installing CocoaPods dependencies..."
          if ! command -v pod &> /dev/null; then
            sudo gem install cocoapods --no-document
          fi
          pod install --repo-update || pod install
          echo "‚úÖ CocoaPods dependencies installed"
          
      - name: Clean environment
        run: |
          echo "üßπ Cleaning build environment..."
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ./DerivedData
          rm -rf ./build
          rm -rf ./archive
          
      - name: Build for iOS Device
        run: |
          echo "üî® Building VividAI app for iOS Device..."
          
          set -e
          
          xcodebuild build-for-testing \
            -workspace VividAI.xcworkspace \
            -scheme VividAI \
            -destination 'generic/platform=iOS' \
            -configuration Release \
            -derivedDataPath ./DerivedData \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE="" \
            SUPPORTED_PLATFORMS="iphoneos" \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
            -allowProvisioningUpdates \
            -quiet \
            -jobs 4 \
            2>&1 | tee build_output.log || true
          
          echo "‚úÖ Build completed!"
          
      - name: Find and Verify App Bundle
        run: |
          echo "üîç Looking for app bundle..."
          
          APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found!"
            exit 1
          fi
          
          echo "‚úÖ App bundle found at: $APP_PATH"
          echo "üì± App bundle size: $(du -sh "$APP_PATH")"
          
          # Verify app bundle contents
          echo "üì± App bundle contents:"
          ls -la "$APP_PATH"
          
          # Verify executable exists
          if [ ! -f "$APP_PATH/VividAI" ]; then
            echo "‚ùå App executable not found!"
            exit 1
          fi
          
          echo "‚úÖ App executable found"
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
      - name: Create IPA file
        run: |
          echo "üì¶ Creating IPA file..."
          
          mkdir -p ./Payload
          cp -R "$APP_PATH" ./Payload/
          zip -q -r VividAI-Device.ipa ./Payload
          
          echo "‚úÖ IPA file created: VividAI-Device.ipa"
          echo "üì± IPA file size: $(du -sh VividAI-Device.ipa)"
        
      - name: Upload to Kobiton for Testing
        if: env.KOBITON_USERNAME != ''
        env:
          KOBITON_USERNAME: ${{ secrets.KOBITON_USERNAME }}
          KOBITON_API_KEY: ${{ secrets.KOBITON_API_KEY }}
        run: |
          echo "üì± Uploading to Kobiton for device testing..."
          
          curl -u "$KOBITON_USERNAME:$KOBITON_API_KEY" \
            -X POST "https://api.kobiton.com/v1/apps" \
            -F "app=@VividAI-Device.ipa" \
            -F "appName=VividAI" \
            -F "appVersion=1.0" \
            -F "appDescription=AI Photo/Avatar Generation App" \
            -o kobiton_response.json
          
          echo "‚úÖ Upload to Kobiton completed"
          cat kobiton_response.json
        
      - name: Run Tests on Kobiton Devices
        if: env.KOBITON_USERNAME != ''
        env:
          KOBITON_USERNAME: ${{ secrets.KOBITON_USERNAME }}
          KOBITON_API_KEY: ${{ secrets.KOBITON_API_KEY }}
        run: |
          echo "üß™ Running installation tests on Kobiton devices..."
          
          # Get app ID from previous response
          APP_ID=$(cat kobiton_response.json | grep -o '"id":[0-9]*' | cut -d':' -f2)
          
          if [ -z "$APP_ID" ]; then
            echo "‚ùå Could not get app ID from Kobiton response"
            exit 1
          fi
          
          echo "üì± App ID: $APP_ID"
          
          # Start test session
          curl -u "$KOBITON_USERNAME:$KOBITON_API_KEY" \
            -X POST "https://api.kobiton.com/v1/sessions" \
            -H "Content-Type: application/json" \
            -d '{
              "configuration": {
                "app": "'$APP_ID'",
                "deviceName": "iPhone 13",
                "platformName": "iOS",
                "platformVersion": "15.0"
              }
            }' \
            -o session_response.json
          
          echo "‚úÖ Test session started"
          cat session_response.json
        
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: VividAI-Device-IPA
          path: VividAI-Device.ipa
          retention-days: 30
        
      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          rm -rf ./Payload
          rm -rf ./DerivedData
          rm -rf ./build
          rm -rf ./archive





