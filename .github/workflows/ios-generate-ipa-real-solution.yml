name: Generate iOS Simulator IPA (Real Solution)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-ipa:
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
      
    - name: Install dependencies
      run: |
        echo "üì¶ Resolving dependencies..."
        xcodebuild -resolvePackageDependencies -project VividAI.xcodeproj
        
    - name: Clean environment
      run: |
        echo "üßπ Cleaning build environment..."
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ./DerivedData
        rm -rf ./build
        
    - name: List available simulators
      run: |
        echo "üì± Available simulators:"
        xcrun simctl list devices available
        
    - name: Create and boot iOS Simulator
      run: |
        echo "üì± Creating and booting iOS Simulator..."
        
        # Create simulator if it doesn't exist
        xcrun simctl create "VividAI-Test" "iPhone 16" "iOS 18.4" || echo "Simulator already exists"
        
        # Boot simulator with timeout
        timeout 30 xcrun simctl boot "VividAI-Test" || echo "Simulator boot timeout or already booted"
        
        # Wait for simulator to be ready
        xcrun simctl bootstatus "VividAI-Test" -b || echo "Simulator status check failed"
        
    - name: Build for iOS Simulator using proper approach
      run: |
        echo "üî® Building for iOS Simulator using proper approach..."
        echo "üì± Target: VividAI-Test"
        
        set -e
        
        # Use build approach with proper output management
        xcodebuild build \
          -project VividAI.xcodeproj \
          -scheme VividAI \
          -destination 'platform=iOS Simulator,name=VividAI-Test' \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -resolvePackageDependencies \
          -verbose \
          -showBuildTimingSummary
        
        echo "‚úÖ Build completed successfully!"
        
    - name: Find and verify app bundle in DerivedData
      run: |
        echo "üîç Looking for app bundle in DerivedData..."
        
        # Look for app bundle in DerivedData
        APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå App bundle not found in DerivedData"
          echo "üìÅ Searching in DerivedData:"
          find ./DerivedData -name "*.app" -type d || echo "No .app files found in DerivedData"
          
          # Method 2: Check if build was successful by looking for any VividAI.app
          echo "üìÅ Searching for any VividAI.app:"
          find . -name "VividAI.app" -type d || echo "No VividAI.app found"
          
          # Method 3: Check the build output directory
          echo "üìÅ Checking build output:"
          find . -name "*.app" -type d || echo "No .app files found in current directory"
          
          exit 1
        fi
        
        echo "‚úÖ App bundle found at: $APP_PATH"
        echo "üì± App bundle size: $(du -sh "$APP_PATH")"
        
        # Verify app bundle contents
        echo "üì± App bundle contents:"
        ls -la "$APP_PATH"
        
        # Verify it's a valid app bundle
        if [ ! -f "$APP_PATH/Info.plist" ]; then
          echo "‚ùå Invalid app bundle - missing Info.plist"
          exit 1
        fi
        
        echo "‚úÖ App bundle is valid"
        
        # Set APP_PATH as an output for subsequent steps
        echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
    - name: Create IPA file
      run: |
        echo "üì¶ Creating IPA file..."
        
        # Create Payload directory
        mkdir -p ./Payload
        
        # Copy app bundle to Payload
        cp -R "$APP_PATH" ./Payload/
        
        # Create IPA file
        zip -r VividAI-Simulator.ipa ./Payload
        
        echo "‚úÖ IPA file created: VividAI-Simulator.ipa"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
    - name: Verify IPA file
      run: |
        echo "üîç Verifying IPA file..."
        
        if [ ! -f "VividAI-Simulator.ipa" ]; then
          echo "‚ùå IPA file not found!"
          exit 1
        fi
        
        echo "‚úÖ IPA file exists"
        echo "üì± IPA file size: $(du -sh VividAI-Simulator.ipa)"
        
        # List contents of IPA
        echo "üì¶ IPA contents:"
        unzip -l VividAI-Simulator.ipa | head -20
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: VividAI-Simulator-IPA
        path: VividAI-Simulator.ipa
        retention-days: 30
        
    - name: Cleanup
      run: |
        echo "üßπ Cleaning up..."
        rm -rf ./Payload
        rm -rf ./DerivedData
        rm -rf ./build
        
        # Shutdown simulator
        xcrun simctl shutdown "VividAI-Test" || echo "Simulator already shutdown"
        xcrun simctl delete "VividAI-Test" || echo "Simulator already deleted"
