name: iOS App Installation & Launch Verification

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-app-installation:
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache CocoaPods dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cocoapods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: Install CocoaPods dependencies
        run: |
          echo "üì¶ Installing CocoaPods dependencies..."
          sudo gem install cocoapods
          pod install --repo-update
          echo "‚úÖ CocoaPods dependencies installed"
          
      - name: Clean environment
        run: |
          echo "üßπ Cleaning build environment..."
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ./DerivedData
          rm -rf ./build
          
      - name: Build app for iOS Device
        run: |
          echo "üî® Building VividAI app for iOS Device..."
          
          set -e
          
          # Note: Using iOS Device build instead of Simulator build
          echo "üì± Building for iOS Device (Simulator builds don't create executables properly)"
          
          # CRITICAL FIX: Use build-for-testing instead of build to generate proper executables
          xcodebuild build-for-testing \
          -workspace VividAI.xcworkspace \
          -scheme VividAI \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          DEVELOPMENT_TEAM="" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PROVISIONING_PROFILE="" \
          SUPPORTED_PLATFORMS="iphoneos" \
          VALID_ARCHS="arm64" \
          ARCHS="arm64" \
          EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
          -allowProvisioningUpdates \
          -verbose \
          2>&1 | tee build_output.log
          
          echo "‚úÖ Build completed!"
          
          # Check build output for errors
          if grep -i "error" build_output.log; then
            echo "‚ùå Build errors found:"
            grep -i "error" build_output.log
            exit 1
          else
            echo "‚úÖ No build errors found"
          fi
          
          # Check if build succeeded
          if grep -i "build succeeded" build_output.log; then
            echo "‚úÖ Build succeeded"
          else
            echo "‚ùå Build did not succeed"
            exit 1
          fi
          
      - name: Find app bundle
        run: |
          echo "üîç Looking for app bundle..."
          
          # CRITICAL FIX: build-for-testing creates test bundles, not direct app bundles
          # Look for test bundles first, then extract app bundles from them
          echo "üìÅ Searching for test bundles (.xctest) that contain app bundles..."
          
          # Method 1: Look for test bundles in DerivedData
          echo "üìÅ Searching for test bundles in DerivedData..."
          TEST_BUNDLES=$(find ./DerivedData -name "*.xctest" -type d)
          echo "üìÅ Found test bundles:"
          echo "$TEST_BUNDLES"
          
          # Method 2: Look for test bundles in system DerivedData
          echo "üìÅ Searching for test bundles in system DerivedData..."
          SYSTEM_DERIVED_DATA="/Users/runner/Library/Developer/Xcode/DerivedData"
          if [ -d "$SYSTEM_DERIVED_DATA" ]; then
            SYSTEM_TEST_BUNDLES=$(find "$SYSTEM_DERIVED_DATA" -name "*.xctest" -type d)
            echo "üìÅ Found system test bundles:"
            echo "$SYSTEM_TEST_BUNDLES"
          fi
          
          # Extract app bundle from test bundle
          APP_PATH=""
          for test_bundle in $TEST_BUNDLES $SYSTEM_TEST_BUNDLES; do
            echo "üìÅ Checking test bundle: $test_bundle"
            if [ -d "$test_bundle" ]; then
              # Look for app bundle inside test bundle
              APP_IN_TEST=$(find "$test_bundle" -name "VividAI.app" -type d | head -1)
              if [ -n "$APP_IN_TEST" ]; then
                APP_PATH="$APP_IN_TEST"
                echo "‚úÖ Found app bundle in test bundle: $APP_PATH"
                break
              fi
            fi
          done
          
          # Fallback: Look for app bundle directly (in case build-for-testing didn't work as expected)
          if [ -z "$APP_PATH" ]; then
            echo "üìÅ Fallback: Looking for app bundle directly..."
            APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
            
            # Look in system DerivedData
            if [ -z "$APP_PATH" ]; then
              SYSTEM_DERIVED_DATA="/Users/runner/Library/Developer/Xcode/DerivedData"
              if [ -d "$SYSTEM_DERIVED_DATA" ]; then
                APP_PATH=$(find "$SYSTEM_DERIVED_DATA" -name "VividAI.app" -type d | head -1)
              fi
            fi
          fi
          
          # Check if app bundle was found
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found!"
            echo "üìÅ Searching in all locations..."
            find . -name "*.app" -type d || echo "No .app files found"
            exit 1
          fi
          
          echo "‚úÖ App bundle found at: $APP_PATH"
          echo "üì± App bundle size: $(du -sh "$APP_PATH")"
          
          # Verify app bundle contents
          echo "üì± App bundle contents:"
          ls -la "$APP_PATH"
          
          # Verify it's a valid app bundle
          if [ ! -f "$APP_PATH/Info.plist" ]; then
            echo "‚ùå Invalid app bundle - missing Info.plist"
            exit 1
          fi
          
          if [ ! -f "$APP_PATH/VividAI" ]; then
            echo "‚ùå Invalid app bundle - missing executable"
            exit 1
          fi
          
          echo "‚úÖ App bundle is valid"
          
          # Set APP_PATH as an output for subsequent steps
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
      - name: Create iOS Simulator
        run: |
          echo "üì± Creating iOS Simulator..."
          
          # List available runtimes
          echo "üì± Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS
          
          # Get the latest iOS runtime
          LATEST_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | sed 's/.*iOS \([0-9.]*\).*/iOS \1/')
          echo "üì± Using runtime: $LATEST_RUNTIME"
          
          # Create simulator
          SIMULATOR_ID=$(xcrun simctl create "VividAI Test Simulator" "iPhone 16 Pro" "$LATEST_RUNTIME")
          echo "üì± Created simulator with ID: $SIMULATOR_ID"
          
          # Set simulator ID as environment variable
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          
      - name: Boot iOS Simulator
        run: |
          echo "üì± Booting iOS Simulator..."
          
          # Boot simulator
          xcrun simctl boot "$SIMULATOR_ID"
          
          # Wait for simulator to be ready
          echo "‚è≥ Waiting for simulator to be ready..."
          sleep 10
          
          # Check simulator status
          SIMULATOR_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep "Booted")
          if [ -n "$SIMULATOR_STATUS" ]; then
            echo "‚úÖ Simulator is booted and ready"
          else
            echo "‚ùå Simulator failed to boot"
            exit 1
          fi
          
      - name: Install app on simulator
        run: |
          echo "üì± Installing VividAI app on simulator..."
          
          # Install app
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"
          
          # Verify installation
          INSTALLED_APPS=$(xcrun simctl listapps "$SIMULATOR_ID" | grep -i "vividai")
          if [ -n "$INSTALLED_APPS" ]; then
            echo "‚úÖ App installed successfully"
          else
            echo "‚ùå App installation failed"
            exit 1
          fi
          
      - name: Verify app launch
        run: |
          echo "üì± Verifying app launch..."
          
          # Launch app
          xcrun simctl launch "$SIMULATOR_ID" com.vividai.app
          
          # Wait for app to launch
          sleep 5
          
          # Check if app is running
          RUNNING_APPS=$(xcrun simctl listapps "$SIMULATOR_ID" | grep -i "vividai")
          if [ -n "$RUNNING_APPS" ]; then
            echo "‚úÖ App launched successfully"
          else
            echo "‚ùå App launch failed"
            exit 1
          fi
          
      - name: Test app functionality
        run: |
          echo "üì± Testing basic app functionality..."
          
          # Get app process info
          APP_PROCESS=$(xcrun simctl spawn "$SIMULATOR_ID" launchctl list | grep -i "vividai")
          if [ -n "$APP_PROCESS" ]; then
            echo "‚úÖ App process is running"
          else
            echo "‚ùå App process not found"
            exit 1
          fi
          
          # Check app logs for errors
          echo "üì± Checking app logs..."
          xcrun simctl spawn "$SIMULATOR_ID" log show --predicate 'process == "VividAI"' --last 1m | head -20
          
          echo "‚úÖ App functionality test completed"
          
      - name: Cleanup simulator
        run: |
          echo "üßπ Cleaning up simulator..."
          
          # Shutdown simulator
          xcrun simctl shutdown "$SIMULATOR_ID"
          
          # Delete simulator
          xcrun simctl delete "$SIMULATOR_ID"
          
          echo "‚úÖ Simulator cleanup completed"
          
      - name: Test Results Summary
        run: |
          echo "üìä Test Results Summary:"
          echo "‚úÖ App build: SUCCESS"
          echo "‚úÖ App bundle validation: SUCCESS"
          echo "‚úÖ Simulator creation: SUCCESS"
          echo "‚úÖ App installation: SUCCESS"
          echo "‚úÖ App launch: SUCCESS"
          echo "‚úÖ App functionality: SUCCESS"
          echo ""
          echo "üéâ All tests passed! VividAI app installs and launches successfully."
