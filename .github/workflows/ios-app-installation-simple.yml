name: iOS App Installation Verification (Simple)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify-app-installation:
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        
      - name: Install CocoaPods dependencies
        run: |
          echo "üì¶ Installing CocoaPods dependencies..."
          sudo gem install cocoapods
          pod install
          echo "‚úÖ CocoaPods dependencies installed"
          
      - name: Build app for iOS Simulator
        run: |
          echo "üî® Building VividAI app for iOS Simulator..."
          
          set -e
          
          # List available simulators
          echo "üì± Available simulators:"
          xcrun simctl list devices | grep "iPhone" | head -10
          
          # Get first available iPhone simulator
          AVAILABLE_SIMULATOR=$(xcrun simctl list devices | grep "iPhone" | grep "Available" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
          echo "üì± Using simulator: $AVAILABLE_SIMULATOR"
          
          # Build for iOS Simulator
          xcodebuild build \
            -workspace VividAI.xcworkspace \
            -scheme VividAI \
            -destination "platform=iOS Simulator,id=$AVAILABLE_SIMULATOR" \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE="" \
            SUPPORTED_PLATFORMS="iphonesimulator" \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            EXCLUDED_ARCHS[sdk=iphoneos*]="arm64" \
            -allowProvisioningUpdates \
            -quiet \
            2>&1 | tee build_output.log
          
          echo "‚úÖ Build completed!"
          
          # Check build output for errors
          if grep -i "error" build_output.log; then
            echo "‚ùå Build errors found:"
            grep -i "error" build_output.log
            exit 1
          else
            echo "‚úÖ No build errors found"
          fi
          
          # Check if build succeeded
          if grep -i "build succeeded" build_output.log; then
            echo "‚úÖ Build succeeded"
          else
            echo "‚ùå Build did not succeed"
            exit 1
          fi
          
      - name: Find and validate app bundle
        run: |
          echo "üîç Looking for app bundle..."
          
          # Look for app bundle in DerivedData
          APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
          
          # Look in system DerivedData
          if [ -z "$APP_PATH" ]; then
            SYSTEM_DERIVED_DATA="/Users/runner/Library/Developer/Xcode/DerivedData"
            if [ -d "$SYSTEM_DERIVED_DATA" ]; then
              APP_PATH=$(find "$SYSTEM_DERIVED_DATA" -name "VividAI.app" -type d | head -1)
            fi
          fi
          
          # Check if app bundle was found
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found!"
            exit 1
          fi
          
          echo "‚úÖ App bundle found at: $APP_PATH"
          echo "üì± App bundle size: $(du -sh "$APP_PATH")"
          
          # Verify it's a valid app bundle
          if [ ! -f "$APP_PATH/Info.plist" ]; then
            echo "‚ùå Invalid app bundle - missing Info.plist"
            exit 1
          fi
          
          if [ ! -f "$APP_PATH/VividAI" ]; then
            echo "‚ùå Invalid app bundle - missing executable"
            exit 1
          fi
          
          echo "‚úÖ App bundle is valid"
          
          # Set APP_PATH as an output for subsequent steps
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
      - name: Create and boot iOS Simulator
        run: |
          echo "üì± Creating and booting iOS Simulator..."
          
          # Get the latest iOS runtime
          LATEST_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | sed 's/.*iOS \([0-9.]*\).*/iOS \1/')
          echo "üì± Using runtime: $LATEST_RUNTIME"
          
          # Create simulator
          SIMULATOR_ID=$(xcrun simctl create "VividAI Test Simulator" "iPhone 16 Pro" "$LATEST_RUNTIME")
          echo "üì± Created simulator with ID: $SIMULATOR_ID"
          
          # Boot simulator
          xcrun simctl boot "$SIMULATOR_ID"
          
          # Wait for simulator to be ready
          echo "‚è≥ Waiting for simulator to be ready..."
          sleep 10
          
          # Check simulator status
          SIMULATOR_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep "Booted")
          if [ -n "$SIMULATOR_STATUS" ]; then
            echo "‚úÖ Simulator is booted and ready"
          else
            echo "‚ùå Simulator failed to boot"
            exit 1
          fi
          
          # Set simulator ID as environment variable
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          
      - name: Install and verify app
        run: |
          echo "üì± Installing VividAI app on simulator..."
          
          # Install app
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"
          
          # Verify installation
          INSTALLED_APPS=$(xcrun simctl listapps "$SIMULATOR_ID" | grep -i "vividai")
          if [ -n "$INSTALLED_APPS" ]; then
            echo "‚úÖ App installed successfully"
          else
            echo "‚ùå App installation failed"
            exit 1
          fi
          
      - name: Test app launch
        run: |
          echo "üì± Testing app launch..."
          
          # Launch app
          xcrun simctl launch "$SIMULATOR_ID" com.vividai.app
          
          # Wait for app to launch
          sleep 5
          
          # Check if app is running
          RUNNING_APPS=$(xcrun simctl listapps "$SIMULATOR_ID" | grep -i "vividai")
          if [ -n "$RUNNING_APPS" ]; then
            echo "‚úÖ App launched successfully"
          else
            echo "‚ùå App launch failed"
            exit 1
          fi
          
      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          
          # Shutdown simulator
          xcrun simctl shutdown "$SIMULATOR_ID"
          
          # Delete simulator
          xcrun simctl delete "$SIMULATOR_ID"
          
          echo "‚úÖ Cleanup completed"
          
      - name: Installation Test Results
        run: |
          echo "üìä Installation Test Results:"
          echo "‚úÖ App build: SUCCESS"
          echo "‚úÖ App bundle validation: SUCCESS"
          echo "‚úÖ Simulator setup: SUCCESS"
          echo "‚úÖ App installation: SUCCESS"
          echo "‚úÖ App launch: SUCCESS"
          echo ""
          echo "üéâ VividAI app installs and launches successfully!"
          echo "üì± App is ready for distribution and testing."
