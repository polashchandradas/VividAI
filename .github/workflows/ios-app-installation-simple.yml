name: iOS App Installation Verification (Simple)

on:
  # Disabled push trigger - only run manually when needed
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  verify-app-installation:
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        
      # CRITICAL OPTIMIZATION: Cache CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      
      # OPTIMIZATION: Cache DerivedData for faster builds
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: DerivedData
          key: ${{ runner.os }}-derived-${{ hashFiles('**/*.swift', '**/Podfile') }}
          restore-keys: |
            ${{ runner.os }}-derived-
      
      - name: Install CocoaPods dependencies
        run: |
          echo "üì¶ Installing CocoaPods dependencies..."
          if ! command -v pod &> /dev/null; then
            sudo gem install cocoapods --no-document
          fi
          
          # Check if Pods directory exists from cache
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
            echo "‚úÖ Using cached CocoaPods (Pods directory exists)"
            echo "üì¶ Verifying dependencies (no repo update)..."
            pod install --no-repo-update || pod install
          else
            echo "‚ö†Ô∏è  Cache miss - installing CocoaPods with repo update..."
            pod install --repo-update
          fi
          echo "‚úÖ CocoaPods dependencies installed"
          
      - name: Build app for iOS Device
        run: |
          echo "üî® Building VividAI app for iOS Device..."
          
          set -e
          
          # Note: Using iOS Device build instead of Simulator build
          echo "üì± Building for iOS Device (Simulator builds don't create executables properly)"
          
          # CRITICAL FIX: Build for Simulator to avoid code signing requirements
          # iOS device builds require code signing even with CODE_SIGNING_REQUIRED=NO
          # Simulator builds don't require signing and generate proper executables
          xcodebuild build \
          -workspace VividAI.xcworkspace \
          -scheme VividAI \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -jobs 4 \
          -quiet \
          2>&1 | tee build_output.log
          
          echo "‚úÖ Build completed!"
          
          # Check build output for errors
          if grep -i "error" build_output.log; then
            echo "‚ùå Build errors found:"
            grep -i "error" build_output.log
            exit 1
          else
            echo "‚úÖ No build errors found"
          fi
          
          # Check if build succeeded
          if grep -i "build succeeded" build_output.log; then
            echo "‚úÖ Build succeeded"
          else
            echo "‚ùå Build did not succeed"
            exit 1
          fi
          
      - name: Find and validate app bundle
        run: |
          echo "üîç Looking for app bundle..."
          
          # CRITICAL FIX: build-for-testing creates test bundles, not direct app bundles
          # Look for test bundles first, then extract app bundles from them
          echo "üìÅ Searching for test bundles (.xctest) that contain app bundles..."
          
          # Method 1: Look for test bundles in DerivedData
          echo "üìÅ Searching for test bundles in DerivedData..."
          TEST_BUNDLES=$(find ./DerivedData -name "*.xctest" -type d)
          echo "üìÅ Found test bundles:"
          echo "$TEST_BUNDLES"
          
          # Method 2: Look for test bundles in system DerivedData
          echo "üìÅ Searching for test bundles in system DerivedData..."
          SYSTEM_DERIVED_DATA="/Users/runner/Library/Developer/Xcode/DerivedData"
          if [ -d "$SYSTEM_DERIVED_DATA" ]; then
            SYSTEM_TEST_BUNDLES=$(find "$SYSTEM_DERIVED_DATA" -name "*.xctest" -type d)
            echo "üìÅ Found system test bundles:"
            echo "$SYSTEM_TEST_BUNDLES"
          fi
          
          # Extract app bundle from test bundle
          APP_PATH=""
          for test_bundle in $TEST_BUNDLES $SYSTEM_TEST_BUNDLES; do
            echo "üìÅ Checking test bundle: $test_bundle"
            if [ -d "$test_bundle" ]; then
              # Look for app bundle inside test bundle
              APP_IN_TEST=$(find "$test_bundle" -name "VividAI.app" -type d | head -1)
              if [ -n "$APP_IN_TEST" ]; then
                APP_PATH="$APP_IN_TEST"
                echo "‚úÖ Found app bundle in test bundle: $APP_PATH"
                break
              fi
            fi
          done
          
          # Look for app bundle directly (for Simulator builds)
          if [ -z "$APP_PATH" ]; then
            echo "üìÅ Looking for app bundle in Simulator build output..."
            # Simulator builds output to Release-iphonesimulator directory
            APP_PATH=$(find ./DerivedData -path "*/Release-iphonesimulator/VividAI.app" -type d | head -1)
            
            # Fallback: Look in system DerivedData
            if [ -z "$APP_PATH" ]; then
              SYSTEM_DERIVED_DATA="/Users/runner/Library/Developer/Xcode/DerivedData"
              if [ -d "$SYSTEM_DERIVED_DATA" ]; then
                APP_PATH=$(find "$SYSTEM_DERIVED_DATA" -path "*/Release-iphonesimulator/VividAI.app" -type d | head -1)
              fi
            fi
            
            # Last resort: search anywhere
            if [ -z "$APP_PATH" ]; then
              APP_PATH=$(find ./DerivedData -name "VividAI.app" -type d | head -1)
            fi
          fi
          
          # Check if app bundle was found
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå App bundle not found!"
            exit 1
          fi
          
          echo "‚úÖ App bundle found at: $APP_PATH"
          echo "üì± App bundle size: $(du -sh "$APP_PATH")"
          
          # Verify it's a valid app bundle
          if [ ! -f "$APP_PATH/Info.plist" ]; then
            echo "‚ùå Invalid app bundle - missing Info.plist"
            exit 1
          fi
          
          # Get executable name from Info.plist
          EXECUTABLE_NAME=$(plutil -extract CFBundleExecutable raw "$APP_PATH/Info.plist" 2>/dev/null || echo "VividAI")
          echo "üì± Expected executable name: $EXECUTABLE_NAME"
          
          # Check for executable with the correct name
          if [ ! -f "$APP_PATH/$EXECUTABLE_NAME" ]; then
            echo "‚ùå App executable missing!"
            echo "üì± Looking for executable: $EXECUTABLE_NAME"
            echo "üì± Available files in app bundle:"
            ls -la "$APP_PATH" | grep -v "\.plist\|\.png\|\.jpg\|\.jpeg\|\.gif\|\.bundle\|\.framework"
            
            # Try to find any executable file
            EXECUTABLE_FOUND=$(find "$APP_PATH" -type f -perm +111 | head -1)
            if [ -n "$EXECUTABLE_FOUND" ]; then
              echo "üì± Found executable file: $EXECUTABLE_FOUND"
              # Check if it's the main executable
              if [[ "$EXECUTABLE_FOUND" == "$APP_PATH"* ]]; then
                EXECUTABLE_BASENAME=$(basename "$EXECUTABLE_FOUND")
                echo "üì± Executable basename: $EXECUTABLE_BASENAME"
                # Update Info.plist with correct executable name
                plutil -replace CFBundleExecutable -string "$EXECUTABLE_BASENAME" "$APP_PATH/Info.plist"
                echo "‚úÖ Updated Info.plist with correct executable name"
              fi
            else
              echo "‚ùå No executable files found in app bundle"
              exit 1
            fi
          else
            echo "‚úÖ App executable found: $EXECUTABLE_NAME"
          fi
          
          # Verify executable is actually executable
          EXECUTABLE_NAME=$(plutil -extract CFBundleExecutable raw "$APP_PATH/Info.plist" 2>/dev/null || echo "VividAI")
          if [ -f "$APP_PATH/$EXECUTABLE_NAME" ]; then
            if [ -x "$APP_PATH/$EXECUTABLE_NAME" ]; then
              echo "‚úÖ Executable has proper permissions"
            else
              echo "‚ö†Ô∏è  Executable found but not executable, fixing permissions..."
              chmod +x "$APP_PATH/$EXECUTABLE_NAME"
              echo "‚úÖ Fixed executable permissions"
            fi
          fi
          
          echo "‚úÖ App bundle is valid"
          
          # Set APP_PATH as an output for subsequent steps
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
        
      - name: Create and boot iOS Simulator
        run: |
          echo "üì± Creating and booting iOS Simulator..."
          
          # Get the latest iOS runtime
          LATEST_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | sed 's/.*iOS \([0-9.]*\).*/iOS \1/')
          echo "üì± Using runtime: $LATEST_RUNTIME"
          
          # Create simulator
          SIMULATOR_ID=$(xcrun simctl create "VividAI Test Simulator" "iPhone 16 Pro" "$LATEST_RUNTIME")
          echo "üì± Created simulator with ID: $SIMULATOR_ID"
          
          # Boot simulator
          xcrun simctl boot "$SIMULATOR_ID"
          
          # Wait for simulator to be ready
          echo "‚è≥ Waiting for simulator to be ready..."
          sleep 10
          
          # Check simulator status
          SIMULATOR_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep "Booted")
          if [ -n "$SIMULATOR_STATUS" ]; then
            echo "‚úÖ Simulator is booted and ready"
          else
            echo "‚ùå Simulator failed to boot"
            exit 1
          fi
          
          # Set simulator ID as environment variable
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          
      - name: Install and verify app
        run: |
          echo "üì± Installing VividAI app on simulator..."
          
          # Install app
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"
          
          # Verify installation
          INSTALLED_APPS=$(xcrun simctl listapps "$SIMULATOR_ID" | grep -i "vividai")
          if [ -n "$INSTALLED_APPS" ]; then
            echo "‚úÖ App installed successfully"
          else
            echo "‚ùå App installation failed"
            exit 1
          fi
          
      - name: Test app launch
        run: |
          echo "üì± Testing app launch..."
          
          # Launch app
          xcrun simctl launch "$SIMULATOR_ID" com.vividai.app
          
          # Wait for app to launch
          sleep 5
          
          # Check if app is running
          RUNNING_APPS=$(xcrun simctl listapps "$SIMULATOR_ID" | grep -i "vividai")
          if [ -n "$RUNNING_APPS" ]; then
            echo "‚úÖ App launched successfully"
          else
            echo "‚ùå App launch failed"
            exit 1
          fi
          
      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          
          # Shutdown simulator
          xcrun simctl shutdown "$SIMULATOR_ID"
          
          # Delete simulator
          xcrun simctl delete "$SIMULATOR_ID"
          
          echo "‚úÖ Cleanup completed"
          
      - name: Installation Test Results
        run: |
          echo "üìä Installation Test Results:"
          echo "‚úÖ App build: SUCCESS"
          echo "‚úÖ App bundle validation: SUCCESS"
          echo "‚úÖ Simulator setup: SUCCESS"
          echo "‚úÖ App installation: SUCCESS"
          echo "‚úÖ App launch: SUCCESS"
          echo ""
          echo "üéâ VividAI app installs and launches successfully!"
          echo "üì± App is ready for distribution and testing."
